package lipid;
unit LipidScoreUnit;
// TODO Include here rules and queries to fulfill the practice requirements


// This is one example of rules that only prints the factorial combination of all pairs eliminating the A-A combination.
// !! TODO This rule does not include the lipid type, you shall add it.
// !! TODO Rule that states that the same lipid type with the same number of double bonds and a higher number of carbons should have a higher RT
// !! TODO
rule "Score 1 for lipid pair with increasing RT and carbon count"
     when
         $a1 : /annotations [$rt1 : rtMin, $carbonCount1 : lipid.getCarbonCount(), $doubleBondCount : lipid.getDoubleBondCount(), $lipidType: lipid.getLipidType()]
         $a2 : /annotations [this!= $a1, lipid.getDoubleBondCount() == $doubleBondCount, rtMin > $rt1,lipid.getCarbonCount() > $carbonCount1, lipid.getLipidType() == $lipidType]
     then
         // in this case, the only change is the addition of the score, but the fact does not change so we do not break the principle of refractoriness
         $a1.addScore(1);
         $a2.addScore(1);
         // !! TODO ONLY FOR DEBUGGING
         System.out.println("Scored 1 for annotations: " + $a1 + " and " + $a2);

end
//!! TODO NEXT RULE: Negative evidence. If the RT follows the opposite order than the previous one, then the addScore should be -1.

rule "Score -1 for lipid pair with increasing RT and carbon count"
    when
        $a1 : /annotations [$rt1 : rtMin, $carbonCount1 : lipid.getCarbonCount(), $doubleBondCount : lipid.getDoubleBondCount(),  $lipidType: lipid.getLipidType()]
        $a2 : /annotations [this!= $a1, lipid.getDoubleBondCount() == $doubleBondCount, rtMin < $rt1,lipid.getCarbonCount() > $carbonCount1,lipid.getLipidType() == $lipidType ]
    then
        // in this case, the only change is the addition of the score, but the fact does not change so we do not break the principle of refractoriness
        $a1.addScore(-1);
        $a2.addScore(-1);
        // !! TODO ONLY FOR DEBUGGING
        System.out.println("Scored -1 for annotations: " + $a1 + " and " + $a2);
end

rule "Score 1 for lipid pair with increasing double bonds and decreasing RT"
    when
        $a1 : /annotations [$rt1 : rtMin, $carbonCount1 : lipid.getCarbonCount(), $doubleBondCount : lipid.getDoubleBondCount(),  $lipidType: lipid.getLipidType()]
        $a2 : /annotations [this!= $a1, lipid.getDoubleBondCount() > $doubleBondCount, rtMin < $rt1,lipid.getCarbonCount() == $carbonCount1,lipid.getLipidType() == $lipidType ]
    then
        // in this case, the only change is the addition of the score, but the fact does not change so we do not break the principle of refractoriness
        $a1.addScore(1);
        $a2.addScore(1);
        // !! TODO ONLY FOR DEBUGGING
        System.out.println("Scored 1 for annotations: " + $a1 + " and " + $a2);
end

rule "Score -1 for lipid pair with increasing double bonds and decreasing RT"
    when
        $a1 : /annotations [$rt1 : rtMin, $carbonCount1 : lipid.getCarbonCount(), $doubleBondCount : lipid.getDoubleBondCount(),  $lipidType: lipid.getLipidType()]
        $a2 : /annotations [this!= $a1, lipid.getDoubleBondCount() > $doubleBondCount, rtMin > $rt1,lipid.getCarbonCount() == $carbonCount1,lipid.getLipidType() == $lipidType ]
    then
        // in this case, the only change is the addition of the score, but the fact does not change so we do not break the principle of refractoriness
        $a1.addScore(-1);
        $a2.addScore(-1);
        // !! TODO ONLY FOR DEBUGGING
        System.out.println("Scored 1 for annotations: " + $a1 + " and " + $a2);
end

rule "Score 1 for lipid pair with different LipidType (PG<PE<PI<PA<PS<<PC)"
    when
        $a1 : /annotations [$rt1 : rtMin, $carbonCount1 : lipid.getCarbonCount(), $doubleBondCount : lipid.getDoubleBondCount(), $order1: lipid.getLipidOrder(getLipid().getLipidType)]
        $a2 : /annotations [this!= $a1, lipid.getDoubleBondCount() == $doubleBondCount, rtMin > $rt1,lipid.getCarbonCount() == $carbonCount1, lipid.getLipidOrder(getLipid().getLipidType)> $order1]
    then
        // in this case, the only change is the addition of the score, but the fact does not change so we do not break the principle of refractoriness
        $a1.addScore(1);
        $a2.addScore(1);
        // !! TODO ONLY FOR DEBUGGING
        System.out.println("Scored 1 for annotations: " + $a1 + " and " + $a2);
end

rule "Score -1 for lipid pair with different LipidType (PG<PE<PI<PA<PS<<PC)"
    when
        $a1 : /annotations [$rt1 : rtMin, $carbonCount1 : lipid.getCarbonCount(), $doubleBondCount : lipid.getDoubleBondCount(), $order1: lipid.getLipidOrder(getLipid().getLipidType)]
        $a2 : /annotations [this!= $a1, lipid.getDoubleBondCount() == $doubleBondCount, rtMin < $rt1,lipid.getCarbonCount() == $carbonCount1, lipid.getLipidOrder(getLipid().getLipidType)> $order1 ]
    then
        // in this case, the only change is the addition of the score, but the fact does not change so we do not break the principle of refractoriness
        $a1.addScore(-1);
        $a2.addScore(-1);
        // !! TODO ONLY FOR DEBUGGING
        System.out.println("Scored 1 for annotations: " + $a1 + " and " + $a2);
end

 rule "Penalty for same lipid properties with very different RT"
when
     $a1 : /annotations [$rt1 : rtMin,
     $carbonCount1 : lipid.getCarbonCount(),
     $doubleBondCount : lipid.getDoubleBondCount(),
     $lipidType: lipid.getLipidType()]
    $a2 : /annotations [this!= $a1, lipid.getDoubleBondCount() == $doubleBondCount, rtMin != $rt1,lipid.getCarbonCount() == $carbonCount1, lipid.getLipidType() == $lipidType ]

then
    $a1.addScore(-1);
    $a2.addScore(-1);
end

rule "Score 1 for same lipid properties with same RT"
when
     $a1 : /annotations [$rt1 : rtMin,
     $carbonCount1 : lipid.getCarbonCount(),
     $doubleBondCount : lipid.getDoubleBondCount(),
     $lipidType: lipid.getLipidType()]
    $a2 : /annotations [this!= $a1, lipid.getDoubleBondCount() == $doubleBondCount, rtMin == $rt1,lipid.getCarbonCount() == $carbonCount1, lipid.getLipidType() == $lipidType ]

then
    $a1.addScore(1);
    $a2.addScore(1);
end











